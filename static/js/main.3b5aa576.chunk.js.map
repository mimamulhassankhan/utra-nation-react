{"version":3,"sources":["components/country/Country.js","components/Cart/Cart.js","App.js","serviceWorker.js","index.js"],"names":["Country","props","country","name","population","flag","region","style","border","margin","padding","height","src","alt","onClick","clickHandler","Cart","totalPopulation","countryList","reduce","desh","App","useState","countries","setCountries","pushCountryList","useEffect","fetch","then","res","json","data","addCountryToList","newCountryList","className","length","map","singleCountry","key","alpha3Code","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8NAiBeA,G,MAfC,SAACC,GAAW,IAAD,EACkBA,EAAMC,QAAxCC,EADgB,EAChBA,KAAMC,EADU,EACVA,WAAYC,EADF,EACEA,KAAMC,EADR,EACQA,OAG/B,OACI,yBAAKC,MAFY,CAACC,OAAQ,gBAAiBC,OAAQ,OAAQC,QAAS,SAGhE,4BAAKP,GACL,yBAAKI,MALK,CAACI,OAAQ,QAKIC,IAAKP,EAAMQ,IAAI,aACtC,2CAAiBT,GACjB,2BAAG,2CAAiBE,IACpB,4BAAQQ,QAAS,kBAAMb,EAAMc,aAAad,EAAMC,WAAhD,kBCAGc,EAVF,SAACf,GACV,IAAMgB,EAAkBhB,EAAMiB,YAAYC,QAAO,SAACF,EAAiBG,GAAlB,OAA2BH,EAAkBG,EAAKhB,aAAW,GAE9G,OACI,6BACI,wEAA8Ca,KC6B3CI,MA/Bf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAE0BF,mBAAS,IAFnC,mBAENJ,EAFM,KAEOO,EAFP,KAIbC,qBAAU,WACRC,MAAM,wCACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIP,EAAaO,QAC3B,IAEF,IAAMC,EAAmB,SAAC9B,GACxB,IAAM+B,EAAc,sBAAOf,GAAP,CAAoBhB,IACxCuB,EAAgBQ,IAGlB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6CAAmBX,EAAUY,QAC7B,8CAAoBjB,EAAYiB,QAChC,kBAAC,EAAD,CAAMjB,YAAaA,IACnB,4BAEIK,EAAUa,KAAI,SAAAC,GAAa,OAAI,kBAAC,EAAD,CAAStB,aAAciB,EAAkB9B,QAASmC,EAAgBC,IAAKD,EAAcE,oBChB5GC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3b5aa576.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Country = (props) => {\r\n    const {name, population, flag, region} = props.country;\r\n    const flagStyle = {height: '50px'}\r\n    const countryStyle = {border: '1px solid red', margin: '10px', padding: '10px'}\r\n    return (\r\n        <div style={countryStyle}>\r\n            <h2>{name}</h2>\r\n            <img style={flagStyle} src={flag} alt=\"flag-img\"/>\r\n            <h6>Population: {population}</h6>\r\n            <p><small>Region : {region}</small></p>\r\n            <button onClick={() => props.clickHandler(props.country)}>Add Country</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Country;","import React from 'react';\r\n\r\nconst Cart = (props) => {\r\n    const totalPopulation = props.countryList.reduce((totalPopulation, desh) => totalPopulation + desh.population,0)\r\n\r\n    return (\r\n        <div>\r\n            <h3>Total population of Selected Countries : {totalPopulation}</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Country from './components/country/Country'\nimport Cart from './components/Cart/Cart';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [countryList, pushCountryList] = useState([]);\n\n  useEffect(() => {\n    fetch('https://restcountries.eu/rest/v2/all')\n    .then(res => res.json())\n    .then(data => setCountries(data));\n  },[]);\n\n  const addCountryToList = (country) => {\n    const newCountryList = [...countryList, country];\n    pushCountryList(newCountryList);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Data Loaded : {countries.length}</h1>\n        <h3>Country Added: {countryList.length}</h3>\n        <Cart countryList={countryList}/>\n        <ul>\n          {\n            countries.map(singleCountry => <Country clickHandler={addCountryToList} country={singleCountry}  key={singleCountry.alpha3Code}></Country>)\n          }\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}